name: Rust CI/CD

on:
    push:
        branches: [ "main"]
    pull_request:
        branches: [ "main"]
    workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repo
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Cache Cargo dependencies for faster builds
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # 3. Install Rust (stable by default)
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # 4. Lint with Clippy
      - name: Lint with Clippy
        run: cargo clippy --all-features --all-targets -- -D warnings

      # 5. Check code formatting
      - name: Check formatting
        run: cargo fmt --all -- --check

      # 6. Build
      - name: Build project
        run: cargo build --all --release

      # 7. Run tests
      - name: Run tests
        run: cargo test --all --release
